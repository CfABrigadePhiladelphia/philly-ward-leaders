{
  "name": "leaflet-pip",
  "version": "0.1.1",
  "description": "point in polygon searches for leaflet",
  "main": "index.js",
  "scripts": {
    "test": "browserify test/*.js | tape-run",
    "build": "browserify -s leafletPip index.js > leaflet-pip.js && uglifyjs leaflet-pip.js -c -m > leaflet-pip.min.js"
  },
  "keywords": [
    "leaflet",
    "plugin",
    "point",
    "in",
    "polygon",
    "geo",
    "geographical"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/mapbox/leaflet-pip.git"
  },
  "devDependencies": {
    "tape": "~2.13.3",
    "tape-run": "~0.1.1",
    "leaflet": "~0.7.3",
    "phantomjs": "~1.9.7-9",
    "browserify": "~4.1.11"
  },
  "author": {
    "name": "Tom MacWright",
    "email": "tom@macwright.org"
  },
  "license": "ISC",
  "dependencies": {
    "geojson-utils": "~1.1.0"
  },
  "readme": "## point in polygon for Leaflet\n\n[![build status](https://secure.travis-ci.org/mapbox/leaflet-pip.png)](http://travis-ci.org/mapbox/leaflet-pip)\n\nA [Leaflet](http://leafletjs.com/)-friendly API for [point in polygon](http://en.wikipedia.org/wiki/Point_in_polygon)\noperations, using [substack](https://github.com/substack)'s\n[point in polygon](https://github.com/substack/point-in-polygon) library.\n\n## install\n\nWith browserify\n\n    npm install leaflet-pip\n\nOtherwise copy `leaflet-pip.min.js`.\n\n## example\n\n```\nvar gjLayer = L.geoJson(statesData);\nvar results = leafletPip.pointInLayer([-88, 38], gjLayer);\n// results is an array of L.Polygon objects containing that point\n```\n\n## api\n\n### `leafletPip.pointInLayer(point, layer L.GeoJSON, [first])`\n\nPoint can be:\n\n* A two-element array of `[lng, lat]`\n* A `L.LatLng` object\n\nLayer must be:\n\n* A `L.geoJSON` layer\n\n`first` can be:\n\n* `boolean`: `true` to accept the first match, or `false` to return all\n  polygons containing this point. This can be useful if you know that your\n  polygons are non-overlapping or don't care about more than one result,\n  since it will be much faster. By default, **this is false** and all matches\n  are returned.\n\nReturns:\n\nAn array of polygons in which the given point resides, an empty array if there\nare none. The polygons are returned as direct sublayers, so they can include\nMultiPolygons. You can call `pointInLayer` again on those if you want the\nsub-polygon result.\n\n### `leafletPip.bassackwards`\n\nLeaflet treats literate coordinate arrays as `[lat, lon]`, unlike GeoJSON\nand [any true scotsman](http://en.wikipedia.org/wiki/No_true_Scotsman). `leaflet-pip`\ntreats literate coordinate arrays as `[lon, lat]`, but if you set `bassackwards`\nto true, it'll do things the Leaflet/Google Maps API way.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mapbox/leaflet-pip/issues"
  },
  "_id": "leaflet-pip@0.1.1",
  "dist": {
    "shasum": "73906ef70e728032d299dcd56931c9d0a2c148fc"
  },
  "_from": "leaflet-pip@",
  "_resolved": "https://registry.npmjs.org/leaflet-pip/-/leaflet-pip-0.1.1.tgz"
}
